/*
  WARNING: This source code is a Tokito adaptation of Liane Cagara's work.
  Unauthorized modifications or tampering may lead to strict actions.
  Proceed with caution and adhere to Tokito's guidelines.
*/

import { TokitoSymbols } from "./tokitoSymbols.js";

/**
 * @typedef {{ key: string; handler: Function, description: string | null, args: string[] | null, aliases: string[] | null }} Config
 */

export class TokitoCMDHome {
  /**
   *
   * @param {{ home: Function, isHyphen: boolean, argIndex: number, setup: Function, entryConfig: {}; entryInfo: { [key: string] : null | Config } }} options
   * @param {Config[]} configs
   */
  constructor(
    {
      home,
      isHyphen = false,
      argIndex = 0,
      setup = () => {},
      entryConfig,
      entryInfo,
    },
    configs
  ) {
    if (entryConfig) {
      configs = Object.entries(entryConfig).map(([key, handler]) => ({
        key,
        handler,
        ...(entryInfo[key] ?? {}),
      }));
      isHyphen = true;
      argIndex = 0;
    }
    this.configs = configs;
    this.options = { home, isHyphen, argIndex, setup };
  }

  async runInContext(ctx) {
    const { args, input, output } = ctx;
    const key = this.options.isHyphen
      ? input.propertyArray[this.options.argIndex]
      : input.arguments[this.options.argIndex];

    const targets = this.configs.filter((i) => {
      if (i.key === key || i.key.toLowerCase() === String(key).toLowerCase()) {
        return true;
      }

      if (Array.isArray(i.aliases)) {
        return (
          i.aliases.includes(key) ||
          i.aliases.some(
            (j) =>
              String(j).toLowerCase() === String(key).toLowerCase() ||
              String(j).replace("-", "").toLowerCase() ===
                String(key).replace("-", "").toLowerCase()
          )
        );
      }
    });

    const extraCTX = {};

    try {
      await this.options.setup(ctx, extraCTX);
    } catch (error) {
      console.error("Error during setup:", error);
      return output.error(error);
    }

    if (targets.length > 0) {
      for (const { handler } of targets) {
        try {
          await handler(ctx, extraCTX);
        } catch (error) {
          console.error("Error during handler execution:", error);
          return output.error(error);
        }
      }
    } else {
      const { home } = this.options;
      const newArgs = [ctx.commandName, ...input.arguments.original];

      const slicedArgs = newArgs.slice(0, this.options.argIndex + 1);

      const itemList = this.createItemLists(
        this.configs,
        this.options.isHyphen ? ctx.commandName : slicedArgs.join(" "),
        global.Tokito.config.prefix
      );

      console.log("No matching targets found, calling home function with itemList:", itemList);
      ctx.cancelCooldown?.();

      if (typeof home === "function") {
        try {
          await home(ctx, { ...extraCTX, itemList });
        } catch (error) {
          console.error("Error during home function execution:", error);
          return output.error(error);
        }
      } else {
        await output.reply(
          `${TokitoSymbols.burger} **Options**\n\n${itemList}\n\n${TokitoSymbols.standardLine}\nAuto-Generated by Tokito`
        );
      }
    }
  }

  /**
   * @param {Config} config
   */
  createItemList(config, commandName, prefix = global.Tokito.config.prefix) {
    console.log(`Creating item list for command: ${commandName} with prefix: ${prefix}`);
    return (
      `${TokitoSymbols.disc} **${prefix}${commandName}${
        this.options.isHyphen ? "-" : " "
      }${config.key}** [font=fancy_italic]${
        Array.isArray(config.args) ? config.args.join(" ") : ""
      }[:font=fancy_italic]${
        typeof config.description === "string"
          ? `\n${TokitoSymbols.charm} ${config.description}`
          : ""
      }` +
      (!Array.isArray(config.aliases)
        ? ""
        : `\n[font=fancy_italic]Aliases: ${config.aliases.join(", ")}[:font=fancy_italic]`)
    );
  }

  /**
   * @param {Config[]} configs
   */
  createItemLists(configs, commandName, prefix = global.Tokito.config.prefix) {
    return configs.map((i) => this.createItemList(i, commandName, prefix)).join("\n\n");
  }
}

/**
 * @typedef {{ key: string; handler: Function, description: string | null, args: string[] | null, aliases: string[] | null }} Config
 */

export class TokitoCMDHomeGoat {
  /**
   * @param {{ home: Function, argIndex: number, setup: Function }} options
   * @param {Config[]} configs
   */
  constructor({ home, argIndex = 0, setup = () => {} }, configs) {
    this.configs = configs;
    this.options = { home, argIndex, setup };
  }

  async runInContext(ctx) {
    const { args, event: input, message: output } = ctx;
    const key = args[this.options.argIndex];

    const targets = this.configs.filter((i) => {
      if (i.key === key || i.key.toLowerCase() === String(key).toLowerCase()) {
        return true;
      }

      if (Array.isArray(i.aliases)) {
        return (
          i.aliases.includes(key) ||
          i.aliases.some(
            (j) =>
              String(j).toLowerCase() === String(key).toLowerCase() ||
              String(j).replace("-", "").toLowerCase() ===
                String(key).replace("-", "").toLowerCase()
          )
        );
      }
    });

    const extraCTX = {};

    try {
      await this.options.setup(ctx, extraCTX);
    } catch (error) {
      console.error("Error during setup:", error);
      return output.error(error);
    }

    if (targets.length > 0) {
      for (const { handler } of targets) {
        try {
          await handler(ctx, extraCTX);
        } catch (error) {
          console.error("Error during handler execution:", error);
          return output.error(error);
        }
      }
    } else {
      const { home } = this.options;
      const newArgs = [ctx.commandName, ...input.arguments.original];

      const slicedArgs = newArgs.slice(0, this.options.argIndex + 1);

      const itemList = this.createItemLists(
        this.configs,
        slicedArgs.join(" "),
        global.Tokito.config.prefix
      );

      console.log("No matching targets found, calling home function with itemList:", itemList);

      if (typeof home === "function") {
        try {
          await home(ctx, { ...extraCTX, itemList });
        } catch (error) {
          console.error("Error during home function execution:", error);
          return output.error(error);
        }
      } else {
        await output.reply(
          `${TokitoSymbols.burger} **Options**\n\n${itemList}\n\n${TokitoSymbols.standardLine}\nAuto-Generated by Tokito`
        );
      }
    }
  }
}
